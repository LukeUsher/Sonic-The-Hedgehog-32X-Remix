;---------------------------------------------------------------*
;
; Sonic the Hedgehog 32x
; - - - - - - - - - - - -
;
;  Version: 1.0
;  By: drx <thedrx@gmail.com>, http://www.hidden-palace.org/
;
;  Thanks to: Puto, Upthorn, Hivebrain
;
;---------------------------------------------------------------*

;---------------------------------------------------------------*
;
; 1. What is this?
; - - - - - - - - -
;
;  Sonic 1 32x is a port of Sonic 1 to Sega 32x, an add-on to
;   the Sega Megadrive.
;
;  Its main objectives are:
;
;   - to present homebrew developers with samples of working
;     32x code and improve the understanding of 32x
;   - to enhance Sonic 1 with 32x's features
;   - to allow Sonic 1 ROM hackers to make use of 32x's features
;
;  It is distributed in the following forms:
;
;   - "Sonic 1 32x": Sonic1.32x
;       a pure port of Sonic 1 to 32x without any additions or 
;       enhancements
;
;   - "Sonic 32": Sonic32.32x
;       an on-going ROM hack utilizing some of 32x's features
;
;   - source code
;       
;---------------------------------------------------------------*

;---------------------------------------------------------------*
;
; 2. Versions
; ---------------
; 
;  1.0
;   (2008 08 31): first public release
;                 
;                 Sonic 1 32x:
;                  - fixed LZ conveyor bug (Upthorn, Puto)
;
;                 Sonic 32:
;                  - fixed SBZ PCM samples by using separate channels (Puto)
;                  - 68000: added PWM driver support to SMPS (Puto)
;                  - Slave SH2: fixed minor bugs (drx)
;
;  RC3
;   (2008 08 31): all bugs (apparently) fixed
;                 68000: SEGA sound fixed to use either DAC through 68k or PWM
;                 Slave SH2: a functional PWM driver coded in
;                 Slave SH2: fixed aligning problem with s_obj.exe
;                 Slave SH2: PWM driver operation moved to cache
;
;  RC2
;   (2008 02 01): bug fixes
;
;  RC1           
;   (2008 01 11): port nearly finished, almost bugless
; 
;  2007 Nov 18:   most of the game engine done
;                 levels, special stages are playable
;                 only a few essential sprites have been ported
;
;  2007 Nov 17:   first playable tech demo
;                 only bare components for the title screen ported
;
;---------------------------------------------------------------*

;---------------------------------------------------------------*
; 
; 3. Source code (and how to use it)
; - - - - - - - - - - - - - - - - - -
;
;  I have included the source code for the whole project in
;   hopes that it will be useful for people who intend to 
;   code on the 32x but don't know where to start as well 
;   as prospective Sonic 1 32x ROM hackers
;
;  As of now the code that makes use of 32x features is not fully
;   compatible with real hardware as I have no means of real-time
;   testing of 32x code. Hopefully this can be fixed at some
;   point in the future
;
;  The structure of the project is as follows:
;
;   /artkos/ - Kosinski compressed data
;   /artnem/ - Nemesis compressed data
;   /artunc/ - uncompressed data
;   /collide/ - collision data
;   /map16/ - 16x16 mappings data
;   /map256/ - 256x256 mappings data
;   /mapeni/ - Enigma compressed mappings data
;   /sound/ - song and sound data
;   /sslayout/ - special stage layout data
;
;   /asm68k.exe - 68000 assembler
;   /asmsh.exe - SH2 assembler
;   /s_obj.exe - used at build-time to align Slave SH2 code properly
;   /s_obj.c - source code to s_obj.exe
;   
;   /build.dat - script used to build Sonic1.32x
;   /build_32.dat - script used to build Sonic32.32x
;   /build_test.dat - script used to build Sonic_test.32x
;                     (Sonic32 with experimental functions)
;
;   /main.asm - main 68000 code, built last
;   /sh2.inc - useful SH2 macros and equates
;   /m_obj.inc - Master SH2 virtual address align
;   /s_obj.inc - Slave SH2 virtual address align
;                (generated by s_obj.exe at build-time automatically) 
;   /sh2_m.asm - Master SH2 code
;   /sh2_s.asm - Slave SH2 code
;
;  The 68000 contains code normally executed in MD mode
;  The Master SH2 is intended for processing of 32x VDP graphics and
;   communication with 32x VDP
;  The Slave SH2 is used for PWM sound. Its code resides mainly in
;   cache for speedier execution.
;
;  Caveats:
;   (read and abide these carefully to avoid any problems)
;
;   * 32x is a very fragile machine when it comes to timing and other things
;     DO follow guidelines placed directly in code.
;
;   * the 68000 on the 32x has a drastically different virtual
;      address map. Remember to prefix your absolute addressing
;      (these include: jmp, jsr, dc.l, lea)
;
;   * for invariable data used by ALL levels and all parts of the game
;      use the $0-$7FFFF area of ROM. Absolute references to such data should be
;      prefixed with $880000, e.g.:
;    
;      jsr $880000+BuildSprites
;      dc.l $880000+Demo_GHZ, $880000+Demo_GHZ
;
;     $880000-$8fffff corresponds to $0-$7ffff in ROM
;
;   * for large data used only in specific levels, use banks
;     banked data is prefixed by $900000, e.g.:
;
;      move.l #$900000+Col_GHZ,($FFFFF796).w
;      dc.l $900000+Nem_GHZ_2nd
;
;     $900000-$9fffff can refer to:
;      - $0-$fffff or
;      - $100000-$1fffff or
;      - $200000-$2fffff or
;      - $300000-$3fffff or
;
;     in ROM, depending on the bank settings. 
;     You might want to shift some data from one bank to another depending on your needs
;
;   * in SH2, almost all branches (e.g. bra, bsr) have delayed slots, e.g.:
;
;       bra   some_label
;	mov.l #0,r0
;
;     the mov.l instruction will be executed BEFORE the bra due to it being in
;      a delayed slot. avoid this by using:
;
;       bra   some_label
;       nop
;	mov.l #0,r0
;
;   * in SH2, use the align4 (not align 4, which is buggy) macro to align 
;      longword data properly. the SH2 cuts of the last two bits of an address
;      on longword access (so e.g. if you read a longword from 012356 it will read
;      012354 instead).
;
;   * the Slave SH2 operates mostly in Cache, a decision I made to speed up execution
;      remember that Cache space is very limited (only $400 bytes). due to this
;      I had to squeeze the data around, and this is the reason for unusual data placement
;   
;   * the build scripts use the equates TEST and S32. you can rename S32 to something that
;      more suits your hack    
;
;
;  Using the PWM in SMPS (in songs) (by Puto)
; - - - - - - - - - - - - - - - - - - - - - - -
;
;  Adding PWM channels to music in Sonic32:
;
;   The first PWM channel is what, in the regular Sonic 1, would be the DAC. This was done
;    for backwards compatibility with existing Sonic 1 music.
;
;   Byte 8 of a song, which was previously unused in Sonic 1 songs, is now the number of
;    extra PWM channels beyond the first one. (maximum of 3 for 4 PWM channels).
;    The pointers to the new channels should then be added after PSG3's header
;    (they don't have a pitch/volume setting, so you should just put in
;    the pointers without anything else)
;
;   Example header:
; 
;    01 23 06 03 01 02 04 56 03 00 07 89 00 00 0A BC 00 00 0D EF 00 00 12 34 00 00 13 45 00 00 14 56 00 00 00 00 15 67 00 00 00 00 18 9A 00 00 00 00 22 22 33 33 44 44
;
;   So let's read this header, starting from the beginning. The first two bytes show that the voices are at location $0123
;    The next two bytes are the channel setup, as in regular Sonic 1. Tempo is 01 02.
;    Now you have $0456 as the first PWM channel. The next byte shows that there are three more PWM channels, which we will read after the rest of the channels.
;    $0789 is the location of FM1, with a pitch of 0 and a volume of 0
;    $0ABC is the location of FM2, with a pitch of 0 and a volume of 0
;    $0DEF is the location of FM3, with a pitch of 0 and a volume of 0
;    $1234 is the location of FM4, with a pitch of 0 and a volume of 0
;    $1345 is the location of FM5, with a pitch of 0 and a volume of 0
;    $1456 is the location of PSG1, etc.
;    $1567 is the location of PSG2
;    $189A is the location of PSG3
;
;    Now after all of this was read, we get to check out the extra PWM channels, we have three, therefore
;
;    $2222 is the location of PWM2
;    $3333 is the location of PWM3
;    $4444 is the location of PWM4
;
;    And that's it. Also, since the DAC is no longer used, you can now use FM6 without sacrificing percussion (set 0703 in the channel's header).
;
;   
;---------------------------------------------------------------*